#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>

void heapify(int* polje, int n)
{
	int i, j, k, broj;

	for (k = 1; k < n; k++)
	{
		broj = *(polje + k);
		i = k;
		j = (i - 1) / 2;

		if (broj > * (polje + j) && i > 0)
		{
			*(polje + i) = *(polje + j);
			i = j;
			j = (i - 1) / 2;
		}

		*(polje + i) = broj;
	}
}
void arrange(int* polje, int n)
{
	int i, j = 0, broj;
	broj = *(polje + j);

	i = 2 * j + 1;

	while (i <= n - 1)
	{
		if (i - 1 <= n - 1)
		{
			if (*(polje + i) < *(polje + i + 1))
			{
				i++;
			}
		}
		if (broj < *(polje + i))
		{
			*(polje + j) = *(polje + i);
			j = i;
			i = 2 * i + 1;
		}
		else
		{
			break;
		}

		*(polje + j) = broj;
	}
}
void heapsort(int* polje, int n)
{
	int i, t;

	heapify(polje, n);

	for (i = 0; i < n; i++)
	{
		t = *(polje + 0);
		*(polje + 0) = *(polje + i);
		*(polje + i) = t;

		arrange(polje, i);
	}
}
void swap(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}
void bubblesort(int* polje, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = 0; j < n - 1 - i; j++)
		{
			if (*(polje + j) > * (polje + j + 1))
			{
				swap(polje + j, polje + j + 1);
			}
		}
	}
}
void merge(int* polje, int left, int x, int right)
{
	int i, j, k;
	int q1 = x - left + 1;
	int q2 = right - x;

	int* L = (int*)malloc(q1 * sizeof(int));
	int* R = (int*)malloc(q2 * sizeof(int));

	for (i = 0; i < q1; i++)
	{
		*(L + i) = *(polje + left + i);
	}

	for (j = 0; j < q2; j++)
	{
		*(R + j) = *(polje + x + 1 + j);
	}

	i = 0;
	j = 0;
	k = left;

	while (i < q1 && j < q2)
	{
		if (*(L + i) <= *(R + j))
		{
			*(polje + k) = *(L + i);
			i++;
		}
		else
		{
			*(polje + k) = *(R + j);
			j++;
		}
		k++;
	}

	while (i < q1)
	{
		*(polje + k) = *(L + i);
		i++;
		k++;
	}

	while (j < q2)
	{
		*(polje + k) = *(R + j);
		j++;
		k++;
	}
	free(L);
	free(R);
}
void mergeSort(int* polje, int left, int right)
{
	if (left < right)
	{
		int x = left + (right - left) / 2;

		mergeSort(polje, left, x);
		mergeSort(polje, x + 1, right);

		merge(polje, left, x, right);
	}
}
int main()
{
	//Potrebne varijable
	int n;
	srand((unsigned)time(NULL));

	//Unos velicine polja
	printf("Unesite velicinu polja:\n");
	scanf("%d", &n);

	//Zauzimanje prostora za polje
	int* polje = (int*)malloc(n * sizeof(int));

	for (int i = 0; i < n; i++)
	{
		*(polje + i) = (rand() % (20 - 0 + 1)) + 0;
	}

	//Mjerenja  
	time_t t1, t2, t3, t4, t5, t6;
	t1 = clock(); //KOD MJERENJA BRZINE ALGORITAMA POTREBNO JE ZAKOMENTIRATI ONE ALGORITME KOJI SE NE KORISTE, JER KADA POLJE PRODJE KROZ ALGORITAM ZA SORTIRANJE ONO CE BITI SORTIRANO I ONDA CE DRUGI ALGORITMI DAVATI POGRESNE REZULTATE
	bubblesort(polje, n);
	t2 = clock();

	t3 = clock();
	heapsort(polje, n);
	t4 = clock();

	t5 = clock();
	mergeSort(polje, 0, n - 1);
	t6 = clock();

	// ISPIS REZULTATA MJERENJA

	printf("Vrijeme trajanja Bubblesort-a je %dms\n", t2 - t1);

	printf("Vrijeme trajanja Heapsort-a je %dms\n", t4 - t3);

	printf("Vrijeme trajanja Mergesort-a je %dms\n", t6 - t5);

	free(polje);
	return 0;
}