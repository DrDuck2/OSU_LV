#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct stog
{
int sp;
int polje[100];
} Stog;

int povrh_stog(Stog* s1, Stog* s2, int a, int b)
{
int n, m;
Clear(s1);
Clear(s2);
Push(s1, a);
Push(s2, b);
int povrh = 0;
do
{
n = Pop(s1);
m = Pop(s2);
if (m == n || n == 1 || m == 0)
{
povrh = povrh + 1;
}
else
{
Push(s1, n - 1);
Push(s2, m - 1);
Push(s1, n - 1);
Push(s2, m);
}
} while (IsEmpty(s1) == 0);

return povrh;
}

int povrh(int n, int m)
{
if (m == n || n == 1 || m == 0)
{
return 1;
}
else
{
return povrh(n - 1, m - 1) + povrh(n - 1, m);
}
}

void Clear(Stog* s)
{
s->sp = 0;
}

void Push(Stog* s, int x)
{
s->sp += 1;
s->polje[s->sp] = x;
}

int Pop(Stog* s)
{
int x = s->polje[s->sp];
s->sp = s->sp - 1;
return x;
}

int IsEmpty(Stog* s)
{
if (s->sp == 0)
return 1;
else return 0;
}


struct Node {
int x;
struct Node* next;
};

struct Node* spp = NULL;


void Pushp(int x) 
{
struct Node* t = (struct Node*)malloc(sizeof(struct Node));
t->x = x;
t->next = spp;
spp = t;

}

void Popp() 
{
struct Node* t = spp;
if (t == NULL) {
return;
}
t = spp;
spp = spp->next;
free(t);
}

void print() 
{
struct Node* t = spp;
printf("Lista je:\n");
while (t != NULL) {
printf("%d\n", t->x);
t = t->next;
}
}





int main()
{
Stog* s1, * s2;
int n;
printf("Unesite vrijednost n, m ce biti n/2 automatski:\n " );
scanf("%d",&n);
s1 = (Stog*)malloc(sizeof(Stog));
s2 = (Stog*)malloc(sizeof(Stog));
time_t t1, t2, t3, t4;
t1 = clock();
int a = povrh(n, n/2);
t2 = clock();
t3 = clock();
povrh_stog(s1, s2, n, n/2);
t4 = clock();

printf("Povrh rekurzije: %d\n", povrh(n, n/2));
printf("Povrh stoga: %d\n", povrh_stog(s1, s2, n, n/2));
printf("Vrijeme rekurzije : %d\n", t2 - t1);
printf("Vrijeme stoga: %d\n", t4 - t3);

free(s1);
free(s2);
return 0;
}



Zad2
===========================================================

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct node{
	int val;
	struct node *next;
}NODE;

NODE *head;
int temp;

void push(int val){
	NODE *ptr = (NODE*) malloc(sizeof(NODE));
	if(ptr == NULL)
	{
		printf("Not able to push!");
	}
	else
	{
		if(head == NULL)
		{
			ptr -> val = val;
			ptr -> next = NULL;
			head = ptr;
		}
		else
		{
			ptr->val = val;
			ptr->next = head;
			head = ptr;
		}
	}
}
void pop(){
	int item;
	NODE *ptr;
	if(head == NULL)
	{
		printf("Underflow");
	}
	else
	{
		item = head->val;
		ptr = head;
		head = head->next;
		free(ptr);
	}
}
void display(){
	int i;
	NODE *ptr;
	ptr = head;
	if(ptr = NULL)
	{
		printf("Stack is empty\n");
	}
	else
	{
		printf("Printing Stack elements\n");
		while(ptr!=NULL)
		{
			printf("%d\n",ptr->val);
			ptr = ptr->next;
		}
	}
}
int top(){
	return head->val;
}
int Stogfunc(int n){
	int i;
	push(1);
	for(i = 2;i<=n;++i)
	{
		temp = top();
		pop();
		push(temp*i);
	}
	return top();
}
float Stog(int n){
	if(n==1 || n/2 == 1)
	{
		return 1;
	}
	else return Stogfunc(n)/(Stogfunc(n/2)*Stogfunc(n-n/2));
}

int main()
{
	int n;
	time_t t1,t2;
	printf("Unesite n: \n");
	printf("m je jednak n/2\n");
	scanf("%d",&n);
	t1 = clock();
	printf("REZULTAT za stog: %.2f\n",Stog(n));
	t2 = clock();
	printf("Vrijeme trajanja je %dms\n",t2-t1 );

	
	
}